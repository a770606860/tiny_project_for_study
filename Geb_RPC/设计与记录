客户端可以阻塞或者非阻塞的调用远程方法：
result := c.Go("服务名：方法名", 返回类型零值或nil, 参数或指向参数的指针...)  // 不会阻塞
result := c.Call("服务名：方法名", 返回类型零值或nil，参数或指向参数的指针...)// 阻塞直到调用返回
当调用上述方法传入返回类型nil时表明无返回值
result中包含调用结果，其为一个指向Call结构体的指针，可以获取信息如下
<-result.Done   // 等待远程调用完成
result.Err      // 远程调用错误信息，通常是连接或者服务不存在等错误
result.Reply    // 返回值
一个例子：
call3 := c.Call("StudentService:SetName", nil, "weiwei")
call3 = c.Call("StudentService:SetParents", nil, &Parents{"a", "b"})
call3 = c.Call("StudentService:GetName", "")
assert.Equal("weiwei", call3.Reply.(string))


被代理的方法必须满足如下条件：
1，不多于一个返回值，最多允许一个返回值是为了调用接口更简洁。
2，参数和返回类型必须是导出类型或者基本类型
3，服务对象和对应方法必须是导出的

编解码器：
// 有些编解码器编码后不带类型信息例如JSON，而有些则携带比如Gob。
// 这些差异由传输接口codec的具体实现负责处理，例如：
// Gob传输器会注册类型信息；
// Json传输器会将Request拆开为head, body进行发送，接收方会从head获取足够的信息后再利用这些信息解码body；

支持的功能：
1，超时处理
a，客户端发起连接并协商时如果超时则断开并释放连接


遇到的问题：
1，server端协商阶段的json解码器读取数据破坏了rpc阶段的gob解码器的数据流
原因：使用了两个不同的解码器，当协商数据和rpc数据经由同一个conn几乎同时到达到服务端时
     json解码器在取数据时可能会读取一部分rpc阶段的数据从而破坏了rpc的数据流
解决办法：使用同一个解码器或者在协商阶段客户端等待服务器发送确认后再发送数据
